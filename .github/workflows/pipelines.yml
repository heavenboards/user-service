name: 🔥 Сборка, тесты и деплой

on:
  push:
    branches:
      - '**'

jobs:
  checkstyle:
    runs-on: ubuntu-latest
    steps:
      - name: 👉🏼 Переключаемся на файлы проекта
        uses: actions/checkout@v3

      - name: 👉🏼 Инициализируем гит сабмодули
        run: |
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'

      - name: 👉🏼 Настройка JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 👉🏼 Делаем maven wrapper исполняемым
        run: chmod +x ./mvnw

      - name: 👉🏼 Запускаем проверку Code Style
        run: ./mvnw checkstyle:check
  build:
    runs-on: ubuntu-latest
    needs: checkstyle
    steps:
      - name: 👉🏼 Переключаемся на файлы проекта
        uses: actions/checkout@v3

      - name: 👉🏼 Инициализируем гит сабмодули
        run: |
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'

      - name: 👉🏼 Настройка JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 👉🏼 Делаем maven wrapper исполняемым
        run: chmod +x ./mvnw

      - name: 👉🏼 Запускаем сборку без тестов
        run: ./mvnw clean package -DskipTests
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 👉🏼 Переключаемся на файлы проекта
        uses: actions/checkout@v3

      - name: 👉🏼 Инициализируем гит сабмодули
        run: |
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'

      - name: 👉🏼 Настройка JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 👉🏼 Делаем maven wrapper исполняемым
        run: chmod +x ./mvnw

      - name: 👉🏼 Запускаем тесты
        run: ./mvnw clean package
  dockerize:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: 👉🏼 Переключаемся на файлы проекта
        uses: actions/checkout@v3

      - name: 👉🏼 Инициализируем гит сабмодули
        run: |
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'

      - name: 👉🏼 Настройка JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 👉🏼 Делаем maven wrapper исполняемым
        run: chmod +x ./mvnw

      - name: 👉🏼 Запускаем install + docker build + docker push
        run: ./mvnw -DskipTests -DregistryUsername=${{ vars.CI_REGISTRY_USER }} -DregistryPassword='${{ vars.CI_REGISTRY_PASSWORD }}' clean install
  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: dockerize
    steps:
      - name: 👉🏼 Устанавливаем sshpass
        run: sudo apt update && sudo apt install -y sshpass

      - name: 👉🏼 Подключаемся к удаленному серверу
        run: sshpass -p ${{ vars.REMOTE_SERVER_PASSWORD }} ssh -o StrictHostKeyChecking=no root@${{ vars.REMOTE_SERVER_HOST }} "
          echo Connected to the remote server ${{ vars.REMOTE_SERVER_HOST }}!"

      - name: 👉🏼 Перезапускаем контейнер с приложением
        run: sshpass -p ${{ vars.REMOTE_SERVER_PASSWORD }} ssh -o StrictHostKeyChecking=no root@${{ vars.REMOTE_SERVER_HOST }} "
          docker stop ${{ vars.CI_REGISTRY_USER }}_${{ github.event.repository.name }} || true &&
          docker rm ${{ vars.CI_REGISTRY_USER }}_${{ github.event.repository.name }} || true &&
          docker rmi $(docker images -f "dangling=true" -q) &&
          docker rmi ${{ vars.CI_REGISTRY_USER }}/${{ github.event.repository.name }}:1.0.0 -f || true &&
          docker pull ${{ vars.CI_REGISTRY_USER }}/${{ github.event.repository.name }}:1.0.0 || true &&
          docker rmi $(docker images -f "dangling=true" -q) &&
          docker network create -d bridge ${{ vars.DOCKER_NETWORK_NAME }} || true &&
          docker run -d --rm -e REMOTE_SERVER_HOST=${{ vars.REMOTE_SERVER_HOST }} -e DOCKER_NETWORK_NAME=${{ vars.DOCKER_NETWORK_NAME }} -e POSTGRES_DATABASE_USERNAME=${{ vars.POSTGRES_DATABASE_USERNAME }} -e POSTGRES_DATABASE_PASSWORD=${{ vars.POSTGRES_DATABASE_PASSWORD }} -e JWT_SECRET=${{ vars.JWT_SECRET }} --name ${{ vars.CI_REGISTRY_USER }}_${{ github.event.repository.name }} --network ${{ vars.DOCKER_NETWORK_NAME }} -p ${{ vars.DOCKER_CONTAINER_PORT }}:${{ vars.DOCKER_CONTAINER_PORT }} ${{ vars.CI_REGISTRY_USER }}/${{ github.event.repository.name }}:1.0.0"
